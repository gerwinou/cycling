import requests
import configparser
from datetime import datetime
import pandas as pd
import os.path

current_date = datetime.now().strftime('%Y-%m-%d')

# Read in the config file. The configfile currently contains the access token
config = configparser.ConfigParser()
config.read('/Users/gb/strava.properties')

# Get the access token from the config file
at = (config.get('oAuth2', 'oAuth2.accessToken'))

def retrieveAthlete(accessToken):
    "Retrieves the data of the currently logged in user"
    getAthlete = "https://www.strava.com/api/v3/athlete/"
    params1 = dict(access_token=accessToken)

    a = requests.get(getAthlete, params1)

    athlete = a.json() # This is the json part of the request, returning only a is not enough

    d =  {'lastname':[athlete['lastname']],'email':[athlete['email']]}
    c = ['lastname','email']
    dfathlete = pd.DataFrame(d, columns=c)

    return dfathlete

def retrieveAllActivities(accessToken):
    "Gets all activities for the current athlete and writes them (optionally to a CSV file)."

    # TODO: handle the number of pages better, currently hardcoded as a range of 1,3

    url = "https://www.strava.com/api/v3/athlete/activities/"
    c = ['type','max_speed','average_watts','id','private']
    dfactivities = pd.DataFrame(columns=c)

    for j in range(1, 3):
        params = dict(access_token=accessToken, page=j, per_page=200)

        r = requests.get(url, params)
        print(r.headers['X-RateLimit-Usage'])
        a = r.json()
        print(len(a))
        for i in range (len(a)):

            if (a[i]['type'] == 'Ride'):
                d =  {'id':str(a[i]['id']),'type':a[i]['type'],'max_speed':a[i]['max_speed'],'average_watts':a[i]['average_watts'],'private':a[i]['private']}
                dfactivities = dfactivities.append(d,ignore_index=True)
            i+=1
    writeDfToCsv(dfactivities)
    return dfactivities

def getGear():
    "placeholder for a getGear function"
    return


def getClubs():
    "placeholder for a getClubs function"
    return


def getCurrentRateLimit(at):
    res = retrieveAthlete(at)
    print(res['X-RateLimit-Usage'])
    return

def getActivity(accessToken,activity):
    "Gets the activities for the current athlete"
    url = "https://www.strava.com/api/v3/activities/" + str(activity)
    params = dict(access_token=accessToken)

    r = requests.get(url, params)
    print(r.headers['X-RateLimit-Usage'])
    a = r.json()

    return

def writeDfToCsv(res):
    csv_filename = '../../data/cycling/strava_activities.csv'

    if os.path.isfile(csv_filename):
        timestamp = str(datetime.today())
        print("Writing data to file, previous file will be saved with the following timestamp: " + current_date)
        os.rename(csv_filename, csv_filename + "." + current_date)

    csv_file = open(csv_filename, 'w')

    res.to_csv(csv_file, encoding='utf8',index=True,index_label='Index')
    csv_file.close()

    return

# Main part of the program

res = retrieveAllActivities(at)